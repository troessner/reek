# frozen_string_literal: true

require_relative 'base_command'
require_relative '../../examiner'
require_relative '../../configuration/app_configuration'
require_relative '../../configuration/configuration_file_finder'

module Reek
  module CLI
    module Command
      #
      # A command to collect smells from a set of sources and writes a configuration
      # file that can serve as a todo list.
      #
      class TodoListCommand < BaseCommand
        DEFAULT_CONFIGURATION_FILE_NAME = Configuration::ConfigurationFileFinder::DEFAULT_FILE_NAME
        DETECTOR_KEY = Configuration::AppConfiguration::DETECTORS_KEY
        HEADER = "# Auto generated by Reeks --todo flag\n"
        DO_NOTHING_MESSAGE = "\nNo smells found - nothing to do, exiting.\n"

        attr_reader :configuration_file_path, :mode

        def initialize(**args)
          super
          @configuration_file_path = options.config_file || DEFAULT_CONFIGURATION_FILE_NAME
          @mode = File.exist?(configuration_file_path) ? 'a' : 'w'
        end

        def execute
          if smells.empty?
            puts DO_NOTHING_MESSAGE
          else
            case mode
            when 'w'
              write_to_file
            when 'a'
              append_to_file
            end
          end
          options.success_exit_code
        end

        private

        def smells
          @smells ||= sources.map do |source|
            Examiner.new(source, filter_by_smells: smell_names, configuration: configuration)
          end.map(&:smells).flatten
        end

        def groups
          @groups ||=
            begin
              todos = smells.group_by(&:smell_class).map do |smell_class, smells_for_class|
                smell_class.todo_configuration_for(smells_for_class)
              end
              todos.inject(&:merge)
            end
        end

        def write_to_file
          File.open(configuration_file_path, mode) do |configuration_file|
            configuration_file.write HEADER
            configuration_file.write({ DETECTOR_KEY => groups }.to_yaml)
          end
          puts "\n'#{configuration_file_path}' generated! You can now use this as a starting point for your configuration."
        end

        def append_to_file
          File.open(configuration_file_path, mode) do |configuration_file|
            configuration_file.write "#{HEADER}"
            # to_yaml will also generate "---" at the beginning which will create multiple yaml documents
            # from a parsers view point. We don't want this, hence the string substitution at the end.
            configuration_file.write({ DETECTOR_KEY => groups }.to_yaml.gsub("---\n", ''))
          end
          puts "\nAppended todo configuration to '#{configuration_file_path}'!"
        end
      end
    end
  end
end
