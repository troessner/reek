require_relative '../../../spec_helper'
require_lib 'reek/cli/command/todo_list_command'
require_lib 'reek/cli/options'
require_lib 'reek/configuration/app_configuration'

RSpec.describe Reek::CLI::Command::TodoListCommand do
  let(:existing_configuration) do
    <<-EOS.strip_heredoc
    ---
    detectors:
      UncommunicativeMethodName:
        exclude:
        - Smelly#x
    EOS
  end

  let(:smelly_file) do
    <<-EOS
      # Smelly class
      class Smelly
        # This will reek of UncommunicativeMethodName
        def x
          y = 10 # This will reek of UncommunicativeVariableName
        end
      end
    EOS
  end

  let(:new_configuration_file) do
    <<-EOS.strip_heredoc
    # Auto generated by Reeks --todo flag
    ---
    detectors:
      UncommunicativeMethodName:
        exclude:
        - Smelly#x
      UncommunicativeVariableName:
        exclude:
        - Smelly#x
    EOS
  end

  let(:appended_configuration_file) do
    <<-EOS.strip_heredoc
    ---
    detectors:
      UncommunicativeMethodName:
        exclude:
        - Smelly#x
    # Auto generated by Reeks --todo flag
    detectors:
      UncommunicativeVariableName:
        exclude:
        - Smelly#x
    EOS
  end

  describe '#execute on smelly source' do
    around(:each) do |example|
      Dir.mktmpdir('/tmp') do |tmp|
        Dir.chdir(tmp) do
          write_smelly_file
          example.run
        end
      end
    end

    context 'default configuration file' do
      let(:default_configuration_file_name) { described_class::DEFAULT_CONFIGURATION_FILE_NAME }
      let(:default_configuration) { Reek::Configuration::AppConfiguration.from_path(default_configuration_file_name) }

      context ' does not exist yet' do
        it 'creates it' do
          Reek::CLI::Silencer.silently { todo_command.execute }

          actual_content = File.read(default_configuration_file_name)
          expect(actual_content).to match(new_configuration_file)
        end
      end

      context 'exists already' do
        it 'appends to it' do
          write_existing_configuration default_configuration_file_name
          command = todo_command configuration: default_configuration

          Reek::CLI::Silencer.silently { command.execute }

          actual_content = File.read(default_configuration_file_name)
          expect(actual_content).to match(appended_configuration_file)
        end
      end
    end

    context 'custom configuration file' do
      let(:custom_configuration_file_name) { '.config.reek' }
      let(:options) do
        Reek::CLI::Options.new([]).tap do |options|
          options.config_file = Pathname.new custom_configuration_file_name
        end
      end
      let(:custom_configuration) {  Reek::Configuration::AppConfiguration.from_path(options.config_file) }

      context 'does not exist yet' do
        it 'creates it' do
          command = todo_command options: options

          Reek::CLI::Silencer.silently { command.execute }

          actual_content = File.read(custom_configuration_file_name)
          expect(actual_content).to match(new_configuration_file)
        end
      end

      context 'exists already' do
        it 'appends to it' do
          write_existing_configuration custom_configuration_file_name

          command = todo_command options: options,
                                 configuration: custom_configuration

          Reek::CLI::Silencer.silently { command.execute }

          actual_content = File.read(custom_configuration_file_name)
          expect(actual_content).to match(appended_configuration_file)
        end
      end
    end

    def todo_command(options: Reek::CLI::Options.new([]),
                     sources: [Pathname.new(SMELLY_FILE.basename.to_s)],
                     configuration: Reek::Configuration::AppConfiguration.default)
      described_class.new options: options,
          sources: sources,
          configuration: configuration
    end

    def write_smelly_file
      File.write(SMELLY_FILE.basename, smelly_file)
    end

    def write_existing_configuration(file_name)
      File.write(file_name, existing_configuration)
    end
  end
end
